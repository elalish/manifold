# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    timeout-minutes: 45
    strategy:
      matrix:
        cuda_support: [ON, OFF]
        parallel_backend: [NONE, OMP, TBB]
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    container:
      image: docker://nvidia/cuda:12.0.1-devel-ubuntu22.04
    steps:
    - name: Install dependencies
      run: |
        apt-get -y update
        DEBIAN_FRONTEND=noninteractive apt install -y libomp-dev libassimp-dev git libtbb-dev pkg-config libpython3-dev python3 python3-distutils python3-pip lcov
        pip install trimesh
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: jwlawson/actions-setup-cmake@v1.12
    - name: Build ${{matrix.backend}}
      if: matrix.parallel_backend != 'NONE' || matrix.cuda_support != 'OFF'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_DEBUG=ON -DMANIFOLD_EXPORT=ON -DMANIFOLD_PAR=${{matrix.parallel_backend}} -DMANIFOLD_USE_CUDA=${{matrix.cuda_support}} .. && make
    - name: Test ${{matrix.parallel_backend}} with CUDA ${{matrix.cuda_support}}
      # note that the test for CUDA backend does not really test CUDA, as we
      # don't have CUDA GPU on GitHub Action
      if: matrix.parallel_backend != 'NONE' || matrix.cuda_support != 'OFF'
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/build/bindings/python
        cd build/test
        ./manifold_test
        cd ../../
        python3 bindings/python/examples/run_all.py
    - name: Coverage Report
      # only do code coverage for default sequential backend, it seems that TBB
      # backend will cause failure
      # perhaps issue related to invalid memory access?
      if: matrix.parallel_backend == 'NONE' && matrix.cuda_support == 'OFF'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_PAR=${{matrix.parallel_backend}} -DMANIFOLD_USE_CUDA=${{matrix.cuda_support}} -DCODE_COVERAGE=ON .. && make
        lcov --capture --initial --directory . --output-file ./code_coverage_init.info
        cd test
        ./manifold_test
        cd ../
        lcov --capture --directory . --output-file ./code_coverage_test.info
        lcov --add-tracefile ./code_coverage_init.info --add-tracefile ./code_coverage_test.info --output-file ./code_coverage_total.info
        lcov --remove ./code_coverage_total.info '/usr/*' '*/third_party/*' '*/test/*' '*/extras/*' '*/bindings/*' --output-file ./code_coverage.info
    - uses: codecov/codecov-action@v2
      if: matrix.parallel_backend == 'NONE' && matrix.cuda_support == 'OFF'
      with:
        files: build/code_coverage.info
        fail_ci_if_error: false
        name: ${{matrix.parallel_backend}}-${{matrix.cuda_support}}

  build_cbind:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    container:
      image: docker://nvidia/cuda:12.0.1-devel-ubuntu22.04
    steps:
    - name: Install dependencies
      run: |
        apt-get -y update
        DEBIAN_FRONTEND=noninteractive apt install -y libomp-dev libassimp-dev git libtbb-dev pkg-config libpython3-dev python3 python3-distutils python3-pip
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: jwlawson/actions-setup-cmake@v1.12
    - name: Build C bindings with OMP and CUDA
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_DEBUG=ON -DMANIFOLD_CBIND=ON -DMANIFOLD_PAR=OMP -DMANIFOLD_USE_CUDA=ON .. && make
    - name: Test ${{matrix.parallel_backend}} with CUDA ${{matrix.cuda_support}}
      # note that the test for CUDA backend does not really test CUDA, as we
      # don't have CUDA GPU on GitHub Action
      run: |
        cd build/test
        ./manifold_test --gtest_filter=CBIND.*

  build_wasm:
    timeout-minutes: 30
    runs-on: ubuntu-22.04
    if: github.event.pull_request.draft == false
    steps:
    - name: Install dependencies
      run: |
        sudo apt-get -y update
        DEBIAN_FRONTEND=noninteractive sudo apt install -y nodejs
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Setup WASM
      run: |
        # setup emscripten
        git clone https://github.com/emscripten-core/emsdk.git
        cd emsdk
        ./emsdk install latest
        ./emsdk activate latest
    - uses: jwlawson/actions-setup-cmake@v1.12
    - name: Build WASM
      run: |
        source ./emsdk/emsdk_env.sh
        mkdir build
        cd build
        emcmake cmake -DCMAKE_BUILD_TYPE=Release .. && emmake make
    - name: Test WASM
      run: |
        cd build/test
        node ./manifold_test.js
    - name: Test examples
      run: |
        cd bindings/wasm/examples
        npm ci
        npm run build
        npm test
    - name: Upload WASM files
      uses: actions/upload-artifact@v3
      with:
        name: wasm
        path: bindings/wasm/examples/dist/
        retention-days: 90

  build_windows:
    timeout-minutes: 30
    strategy:
      matrix:
        parallel_backend: [NONE]
        cuda_support: [OFF]
      max-parallel: 1
    runs-on: windows-2019
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: jwlawson/actions-setup-cmake@v1.12
    - uses: ilammy/msvc-dev-cmd@v1
    - name: Install CUDA
      if: matrix.backend == 'CUDA'
      env:
        cuda: "11.3.0"
        visual_studio: "Visual Studio 16 2019"
      shell: powershell
      run: |
        Invoke-RestMethod https://raw.githubusercontent.com/ptheywood/cuda-cmake-github-actions/21811d232fc775fa8d44dddf7f8c5ce2cf8d2b81/scripts/actions/install_cuda_windows.ps1 -OutFile install_cuda_windows.ps1
        .\install_cuda_windows.ps1
    - name: nvcc check
      if: matrix.backend == 'CUDA'
      shell: powershell
      run: |
        nvcc -V
        ls $env:CUDA_PATH
        ls $env:CUDA_PATH\bin
        ls $env:CUDA_PATH\include
    - name: Build ${{matrix.backend}}
      shell: powershell
      run: |
        cmake . -DCMAKE_BUILD_TYPE=Release -B build -DMANIFOLD_DEBUG=ON -DPYBIND11_FINDPYTHON=OFF -DMANIFOLD_PAR=${{matrix.parallel_backend}} -DMANIFOLD_USE_CUDA=${{matrix.cuda_support}} -A x64
        cd build
        cmake --build . --target ALL_BUILD --config Release
    - name: Test ${{matrix.parallel_backend}} with CUDA ${{matrix.cuda_support}}
      shell: bash
      run: |
        cd build/test
        ./Release/manifold_test.exe

  build_mac:
    timeout-minutes: 30
    strategy:
      matrix:
        parallel_backend: [NONE, TBB]
    runs-on: macos-latest
    if: github.event.pull_request.draft == false
    steps:
    - name: Install common dependencies
      run: |
        brew install pkg-config assimp
        pip install trimesh
    - name: Install OpenMP
      if: matrix.parallel_backend == 'OMP'
      run: brew install libomp
    - name: Install TBB
      if: matrix.parallel_backend == 'TBB'
      run: brew install tbb
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: jwlawson/actions-setup-cmake@v1.12
    - name: Build
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_DEBUG=ON -DMANIFOLD_EXPORT=ON -DMANIFOLD_PAR=${{matrix.parallel_backend}} .. && make
    - name: Test
      run: |
        cd build/test
        ./manifold_test

  build_nix:
    timeout-minutes: 30
    strategy:
      matrix:
        variant: [none, omp, tbb, none-cuda, omp-cuda, tbb-cuda, js]
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - uses: cachix/install-nix-action@v15
    - run: nix build -L '.?submodules=1#manifold-${{matrix.variant}}'
