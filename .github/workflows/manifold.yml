# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    timeout-minutes: 45
    strategy:
      matrix:
        parallel_backend: [NONE, TBB]
        gcc: [13, 14]
    runs-on: ubuntu-24.04
    env:
      CC: gcc-${{ matrix.gcc }}
      CXX: g++-${{ matrix.gcc }}
    if: github.event.pull_request.draft == false
    steps:
    - uses: actions/setup-python@v5
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install libglm-dev libgtest-dev libassimp-dev git libtbb-dev pkg-config libpython3-dev lcov ninja-build
        python -m pip install -U trimesh pytest
    - name: Install CCCL
      run: |
        wget -nv https://github.com/NVIDIA/cccl/archive/main.zip
        zipinfo -hz main.zip
        unzip -q main.zip
        cd cccl-main
        mkdir build
        cd build
        cmake .. -G Ninja -DCMAKE_INSTALL_PREFIX=/usr -DCCCL_ENABLE_LIBCUDACXX=OFF -Dlibcudacxx_ENABLE_INSTALL_RULES=ON -DCCCL_ENABLE_CUB=OFF -DCUB_ENABLE_INSTALL_RULES=ON -DCCCL_ENABLE_THRUST=OFF -DTHRUST_ENABLE_INSTALL_RULES=ON -DCCCL_ENABLE_TESTING=OFF
        sudo ninja install
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    - uses: jwlawson/actions-setup-cmake@v2
    - name: Build ${{matrix.backend}}
      if: matrix.parallel_backend != 'NONE'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_PYBIND=ON -DMANIFOLD_DEBUG=ON -DMANIFOLD_EXPORT=ON -DMANIFOLD_PAR=${{matrix.parallel_backend}} .. && make
    - name: Test ${{matrix.parallel_backend}}
      if: matrix.parallel_backend != 'NONE'
      run: |
        export PYTHONPATH=$PYTHONPATH:$(pwd)/build/bindings/python
        cd build/test
        ./manifold_test
        cd ../../
        python3 bindings/python/examples/run_all.py -e
        python3 -m pytest
    - name: Coverage Report
      # only do code coverage for default sequential backend, it seems that TBB
      # backend will cause failure
      # perhaps issue related to invalid memory access?
      if: matrix.parallel_backend == 'NONE'
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=ON -DMANIFOLD_PAR=${{matrix.parallel_backend}} -DCODE_COVERAGE=ON .. && make
        lcov --capture --gcov-tool gcov-${{ matrix.gcc }} --ignore-errors mismatch --initial --directory . --output-file ./code_coverage_init.info
        cd test
        ./manifold_test
        cd ../
        lcov --capture --gcov-tool gcov-${{ matrix.gcc }} --ignore-errors mismatch --directory . --output-file ./code_coverage_test.info
        lcov --add-tracefile ./code_coverage_init.info --add-tracefile ./code_coverage_test.info --output-file ./code_coverage_total.info
        lcov --remove ./code_coverage_total.info '/usr/*' '*/third_party/*' '*/test/*' '*/extras/*' '*/bindings/*' --output-file ./code_coverage.info
        cd ../
    - uses: codecov/codecov-action@v4
      if: matrix.parallel_backend == 'NONE'
      with:
        files: build/code_coverage.info
        fail_ci_if_error: false
        name: ${{matrix.parallel_backend}}
    - name: test cmake consumer
      run: |
        cd build
        sudo cmake --install .
        cd ..
        ./test-cmake.sh
