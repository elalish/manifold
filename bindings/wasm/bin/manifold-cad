#!/usr/bin/env node
// Copyright 2025 The Manifold Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {writeFile} from 'node:fs/promises';
import {extname} from 'node:path';

import {Command} from 'commander';

import {bundleFile} from '../lib/bundle.js';
import {Export3MF} from '../lib/export-3mf.js';
import {ExportGLTF} from '../lib/export-gltf.js';
import * as worker from '../lib/worker.js';

const exporters = [
  new Export3MF(),
  new ExportGLTF()
];
const program = new Command();

program.name('manifold-cad')
    .description('Compile a ManifoldCAD program into a mesh.')
    .argument('<infile.[js|ts]>', 'Input file')
    .argument('<outfile>', 'Output file')
    .action(async(infile, outfile) => {
      // Choose an exporter.
      const exporter = exporters.find(ex => ex.extensions.map(ext => `.${ext}`).includes(extname(outfile)));
      if (!exporter) {
        const extensions = exporters
            .reduce((acc, cur) => ([... acc.extensions, ... cur.extensions ]))
            .map(ext => `.${ext}`)
            .reduceRight((prev, cur, index) => cur + (index ? ', or ' : ', ') + prev);
        console.error(`Output file must be one of ${extensions}`);
        process.exit(1);
      }

      // Build the model.
      const bundle = await bundleFile(infile);
      const doc = await worker.evaluate(bundle, {bundle:false});

      // Convert it and write it to disk.
      const binary = await exporter.asBlob(doc);
      await writeFile(outfile, binary.stream());
    });

program.parseAsync(process.argv);
