#!/usr/bin/env node
// Copyright 2025 The Manifold Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import {readFile, writeFile} from 'node:fs/promises';
import {resolve, extname} from 'node:path';

import {Command, Option} from 'commander';

import {Export3MF} from '../lib/export-3mf.js';
import {ExportGLTF} from '../lib/export-gltf.js';
import {transformStaticImportsToDynamic, cdnUrlHelpers, transformImportsForCDN, dropStaticImport} from '../lib/util.js';
import * as worker from '../lib/worker.js';

const exporters = [
  new Export3MF(),
  new ExportGLTF()
];
const program = new Command();

program.name('manifold-cad')
    .description('Compile a ManifoldCAD program into a mesh.')

    .addOption(new Option('-w', 'Behaviour matches https://manifoldcad.org')
      .implies({cdn: 'jsDelivr'})
    )

    .addOption(new Option('--cdn <string>', "Dynamically load modules from a CDN")
       .choices([...Object.keys(cdnUrlHelpers), 'none'])
       .implies({transformStaticImportsToDynamic: true})
       .default('jsDelivr')
    )

    .addOption(new Option('--transformStaticImportsToDynamic', "Transform static imports to dynamic imports").default(true))

    .argument('<infile.[js|ts]>', 'Input file')
    .argument('<outfile>', 'Output file')

    .action(async(infile, outfile, options) => {

      console.log(options);
      const inPath = resolve(infile);
      const outPath = resolve(outfile);

      // Choose an exporter.
      const exporter = exporters.find(ex => ex.extensions.map(ext => `.${ext}`).includes(extname(outPath)));
      if (!exporter) {
        const extensions = exporters
            .reduce((acc, cur) => ([... acc.extensions, ... cur.extensions ]))
            .map(ext => `.${ext}`)
            .reduceRight((prev, cur, index) => cur + (index ? ', or ' : ', ') + prev);
        console.error(`Output file must be one of ${extensions}`);
        process.exit(1);
      }

      // Build the model.
      let code = await readFile(inPath, 'utf-8');
      code = dropStaticImport(code, '../../manifoldCAD.ts');
      code = dropStaticImport(code, 'manifold-3d/lib/manifoldCAD.js');
      
      if (options.cdn && options.cdn !== 'none') {
        // Rewrite imports to use the CDN in question.
        code = transformImportsForCDN(code, options.cdn);
      }
      if (options.transformStaticImportsToDynamic) {
        // Dynamically load esm modules.  This requires an import hook to work in node.
        await import('../lib/node-http-import-hook.mjs');
        code = transformStaticImportsToDynamic(code);
      }
      const doc = await worker.evaluate(code);

      // Convert it and write it to disk.
      const binary = await exporter.asBlob(doc);
      await writeFile(outfile, binary.stream());
    });

program.parseAsync(process.argv);
