#include <algorithm>

#include "par.h"
#include "polygon.h"
#include "test.h"
#include "utils.h"

namespace manifold {

inline float cross(glm::vec2 p, glm::vec2 q) { return p.x * q.y - p.y * q.x; }

// return true if p intersects with q
// note that we don't care about collinear, head-to-tail etc.
bool intersect(glm::vec2 p0, glm::vec2 p1, glm::vec2 q0, glm::vec2 q1) {
  glm::vec2 r = p1 - p0;
  glm::vec2 s = q1 - q0;
  float rxs = cross(r, s);
  if (rxs < 1e-6 && rxs > -1e-6) {
    // float qpxr = cross(q0 - p0, r);
    // return qpxr < 1e-6 && qpxr > -1e-6;
    //
    // ignore if they are not crossing
    return false;
  }
  float u = cross(p0 - q0, r) / rxs;
  float t = cross(q0 - p0, s) / rxs;
  // we ignore head-to-tail case
  return (1e-6 <= u && u <= (1 - 1e-6) && 1e-6 <= t && t <= (1 - 1e-6));
}

bool safeToRemove(Polygons &polys, int i, int j) {
  if (polys[i].size() == 3) return false;
  int prev = j == 0 ? polys[i].size() - 1 : (j - 1);
  int next = j == (polys[i].size() - 1) ? 0 : (j + 1);
  for (int k = 0; k < polys.size(); k++) {
    if (!std::all_of(countAt(0lu), countAt(polys[k].size()), [&](int l) {
          int ll = l == (polys[k].size() - 1) ? 0 : (l + 1);
          if (i == k && (l == j || ll == j)) return true;
          bool intersected = intersect(polys[i][prev], polys[i][next],
                                       polys[k][l], polys[k][ll]);
          return !intersected;
        }))
      return false;
  }
  return true;
}

std::pair<int, int> findIndex(const Polygons &polys, int i) {
  int outer = 0;
  while (i > polys[outer].size()) i -= polys[outer++].size();
  return std::make_pair(outer, i);
}

void Dump(const Polygons &polys) {
  for (auto poly : polys) {
    std::cout << "polys.push_back({" << std::setprecision(9) << std::endl;
    for (auto v : poly) {
      std::cout << "    {" << v.x << ", " << v.y << "},  //" << std::endl;
    }
    std::cout << "});" << std::endl;
  }
  for (auto poly : polys) {
    std::cout << "show(array([" << std::endl;
    for (auto v : poly) {
      std::cout << "  [" << v.x << ", " << v.y << "]," << std::endl;
    }
    std::cout << "]))" << std::endl;
  }
}

void DumpTriangulation(const Polygons &polys) {
  bool oldProcessOverlaps = manifold::PolygonParams().processOverlaps;
  manifold::PolygonParams().processOverlaps = true;
  auto result = Triangulate(polys);
  manifold::PolygonParams().processOverlaps = oldProcessOverlaps;
  for (auto &tri : result) {
    auto x = findIndex(polys, tri.x);
    auto y = findIndex(polys, tri.y);
    auto z = findIndex(polys, tri.z);
    printf("show(array([[%.7f, %.7f], [%.7f, %.7f], [%.7f, %.7f]]))\n",
           polys[x.first][x.second].x, polys[x.first][x.second].y,
           polys[y.first][y.second].x, polys[y.first][y.second].y,
           polys[z.first][z.second].x, polys[z.first][z.second].y);
  }
}

bool triangulationValid(Polygons &polys, std::vector<glm::ivec3> triangles) {
  std::vector<std::pair<glm::vec2, glm::vec2>> triangleEdges(triangles.size() *
                                                             3);
  for (auto &tri : triangles) {
    auto x = findIndex(polys, tri.x);
    auto y = findIndex(polys, tri.y);
    auto z = findIndex(polys, tri.z);
    triangleEdges.push_back(
        std::make_pair(polys[x.first][x.second], polys[y.first][y.second]));
    triangleEdges.push_back(
        std::make_pair(polys[y.first][y.second], polys[z.first][z.second]));
    triangleEdges.push_back(
        std::make_pair(polys[z.first][z.second], polys[x.first][x.second]));
  }
  return std::all_of(triangleEdges.begin(), triangleEdges.end(), [&](auto &p) {
    return all_of(ExecutionPolicy::Par, triangleEdges.begin(),
                  triangleEdges.end(), [&](auto &q) {
                    return !intersect(p.first, p.second, q.first, q.second);
                  });
  });
}

// we are assuming polys is valid
// we try to remove vertices from polys such that
// 1. the updated polys is still valid (no overlapping edges)
// 2. error in triangulation (either geometryErr or overlapping triangles)
void simplify(Polygons &polys, float precision = -1) {
  PolygonParams().intermediateChecks = true;
  PolygonParams().processOverlaps = false;
  PolygonParams().suppressErrors = true;

  bool removedSomething = true;
  while (removedSomething) {
    removedSomething = false;
    for (int i = 0; i < polys.size(); i++) {
      for (int j = 0; j < polys[i].size(); j++) {
        if (safeToRemove(polys, i, j)) {
          glm::vec2 removed = polys[i][j];
          polys[i].erase(polys[i].begin() + j);
          try {
            auto result = Triangulate(polys, precision);
            // if triangles are non-overlapping, it is fine
            if (triangulationValid(polys, result)) {
              polys[i].insert(polys[i].begin() + j, removed);
            } else {
              removedSomething = true;
            }
          } catch (geometryErr &e) {
            removedSomething = true;
          }
        }
      }
    }
  }
}

TEST(Simplify, WoodgrainSimplified) {
  Polygons polys;
  polys.push_back({
      {72.5, -50},   //
      {-72.5, 50},   //
      {-72.5, -50},  //
  });
  polys.push_back({
      {27.8406734, -49.9749908},  //
      {27.8317509, -49.9774055},  //
      {27.8129711, -49.9802666},  //
      {27.8028603, -49.9818077},  //
      {27.7817535, -49.9834061},  //
      {27.7703876, -49.9842644},  //
      {27.7468357, -49.9849586},  //
      {27.7341537, -49.9853325},  //
      {27.6826229, -49.9852715},  //
      {27.6548767, -49.9852409},  //
      {27.6318684, -49.9844246},  //
      {27.6194782, -49.9839859},  //
      {27.5987511, -49.982296},   //
      {27.5875912, -49.9813843},  //
      {27.5690289, -49.9785423},  //
      {27.5590343, -49.9770126},  //
      {27.5425186, -49.9727516},  //
      {27.5336246, -49.9704552},  //
      {27.5190353, -49.9645004},  //
      {27.511179, -49.9612923},   //
      {27.4983978, -49.9533691},  //
      {27.4915142, -49.9491043},  //
      {27.4804211, -49.938942},   //
      {27.4744473, -49.9334679},  //
      {27.4649239, -49.9207954},  //
      {27.4597969, -49.9139709},  //
      {27.451725, -49.8985138},   //
      {27.4473801, -49.8901901},  //
      {27.4406414, -49.8716736},  //
      {27.4370117, -49.861702},   //
      {27.431488, -49.839859},    //
      {27.4285126, -49.8280983},  //
      {27.4240818, -49.8026505},  //
      {27.4216957, -49.7889481},  //
      {27.4182415, -49.7596283},  //
      {27.4163818, -49.7438393},  //
      {27.4137859, -49.7103729},  //
      {27.4123878, -49.6923523},  //
      {27.4105301, -49.6544647},  //
      {27.4095287, -49.6340637},  //
      {27.4082909, -49.5914841},  //
      {27.4076233, -49.5685577},  //
      {27.4068851, -49.5210152},  //
      {27.4064884, -49.4954147},  //
      {27.4060421, -49.3843422},  //
      {27.4058018, -49.3245354},  //
      {27.4064484, -49.264801},   //
      {27.4067955, -49.2326355},  //
      {27.4087353, -49.1760292},  //
      {27.4097786, -49.1455498},  //
      {27.4130135, -49.0920639},  //
      {27.4147568, -49.0632668},  //
      {27.4192905, -49.0129013},  //
      {27.4217319, -48.9857788},  //
      {27.4275684, -48.9385223},  //
      {27.4307098, -48.9130783},  //
      {27.437849, -48.8689308},   //
      {27.4416924, -48.8451576},  //
      {27.4501362, -48.8041077},  //
      {27.4546833, -48.7820053},  //
      {27.4644375, -48.7440491},  //
      {27.4696884, -48.7236099},  //
      {27.4807529, -48.6887436},  //
      {27.4867115, -48.6699715},  //
      {27.4990902, -48.6381874},  //
      {27.5057545, -48.6210747},  //
      {27.5194473, -48.5923691},  //
      {27.5268211, -48.5769119},  //
      {27.5418339, -48.5512772},  //
      {27.5499172, -48.5374756},  //
      {27.5662518, -48.5149078},  //
      {27.5750465, -48.502758},   //
      {27.5927029, -48.4832497},  //
      {27.602211, -48.4727478},   //
      {27.6211948, -48.456295},   //
      {27.6314163, -48.4474373},  //
      {27.6517277, -48.4340363},  //
      {27.6626644, -48.4268227},  //
      {27.6843071, -48.4164619},  //
      {27.695961, -48.4108849},   //
      {27.7189369, -48.4035645},  //
      {27.731308, -48.3996239},   //
      {27.755621, -48.39534},     //
      {27.768713, -48.3930321},   //
      {27.794363, -48.3917732},   //
      {27.8081741, -48.3910942},  //
      {27.815073, -48.3927612},   //
      {27.8187885, -48.3936615},  //
      {27.8255787, -48.3984795},  //
      {27.8292351, -48.4010735},  //
      {27.8358994, -48.4089394},  //
      {27.8394871, -48.4131737},  //
      {27.8460045, -48.4239883},  //
      {27.849514, -48.4298096},   //
      {27.8558674, -48.4434738},  //
      {27.8592873, -48.4508324},  //
      {27.8654594, -48.4672508},  //
      {27.868782, -48.4760895},   //
      {27.874752, -48.4951553},   //
      {27.8779659, -48.5054245},  //
      {27.8837166, -48.52705},    //
      {27.8868141, -48.5386925},  //
      {27.8923283, -48.562767},   //
      {27.8952961, -48.5757332},  //
      {27.9005547, -48.6021652},  //
      {27.9033852, -48.6163979},  //
      {27.9083672, -48.6450882},  //
      {27.9110508, -48.6605339},  //
      {27.915741, -48.6913834},   //
      {27.9182663, -48.7079926},  //
      {27.9226456, -48.7408981},  //
      {27.9250031, -48.7586174},  //
      {27.9290543, -48.7934837},  //
      {27.9312344, -48.8122559},  //
      {27.9349365, -48.8489838},  //
      {27.9369297, -48.8687592},  //
      {27.9402657, -48.9072456},  //
      {27.9420605, -48.9279709},  //
      {27.945013, -48.9681206},   //
      {27.9466019, -48.9897423},  //
      {27.9491501, -49.0314598},  //
      {27.9505215, -49.0539207},  //
      {27.9526482, -49.0971031},  //
      {27.9537926, -49.1203537},  //
      {27.9596157, -49.3022957},  //
      {27.9627514, -49.4002647},  //
      {27.9640636, -49.4587555},  //
      {27.9647713, -49.4902534},  //
      {27.9654217, -49.5424271},  //
      {27.9657726, -49.5705185},  //
      {27.9656429, -49.6167336},  //
      {27.9655743, -49.6416168},  //
      {27.9645443, -49.6822281},  //
      {27.9639893, -49.7040977},  //
      {27.9619408, -49.7394753},  //
      {27.9608383, -49.758522},   //
      {27.957653, -49.7890205},   //
      {27.9559383, -49.8054428},  //
      {27.9514942, -49.8314247},  //
      {27.9491024, -49.845417},   //
      {27.943285, -49.8672485},   //
      {27.9401531, -49.8790016},  //
      {27.9328403, -49.8970375},  //
      {27.9289017, -49.9067497},  //
      {27.9199753, -49.9213562},  //
      {27.9151688, -49.9292183},  //
      {27.9045086, -49.9407539},  //
      {27.8987694, -49.9469643},  //
      {27.8862591, -49.9557877},  //
      {27.8795223, -49.960537},   //
      {27.8650417, -49.9670143},  //
      {27.8572445, -49.9705009},  //
  });
  polys.push_back({
      {-1.35720801, -49.9852867},  //
      {-1.53781497, -49.9851341},  //
      {-1.56687093, -49.9842949},  //
      {-1.58251643, -49.9838409},  //
      {-1.610147, -49.9824333},    //
      {-1.62502491, -49.9816742},  //
      {-1.65124249, -49.9796944},  //
      {-1.66535974, -49.9786301},  //
      {-1.69017684, -49.9760742},  //
      {-1.70353997, -49.9747009},  //
      {-1.72696924, -49.9715652},  //
      {-1.73958504, -49.9698792},  //
      {-1.76163888, -49.9661636},  //
      {-1.77351403, -49.9641647},  //
      {-1.79420519, -49.9598618},  //
      {-1.80534649, -49.9575424},  //
      {-1.82468712, -49.9526482},  //
      {-1.83510137, -49.9500122},  //
      {-1.85310423, -49.9445229},  //
      {-1.86279809, -49.9415665},  //
      {-1.87947559, -49.9354782},  //
      {-1.88845587, -49.9321976},  //
      {-1.90382051, -49.9255028},  //
      {-1.91209388, -49.9218979},  //
      {-1.92615843, -49.9145966},  //
      {-1.93373156, -49.9106636},  //
      {-1.94650829, -49.9027481},  //
      {-1.95338809, -49.8984871},  //
      {-1.96488953, -49.8899574},  //
      {-1.97108269, -49.8853645},  //
      {-1.98132133, -49.8762131},  //
      {-1.98683453, -49.8712845},  //
      {-1.99582303, -49.8615074},  //
      {-2.00066304, -49.8562431},  //
      {-2.00841403, -49.8458366},  //
      {-2.01258755, -49.8402328},  //
      {-2.0191133, -49.8291931},   //
      {-2.02262712, -49.8232498},  //
      {-2.02794027, -49.811573},   //
      {-2.03080106, -49.8052864},  //
      {-2.03950357, -49.7659798},  //
      {-2.04418969, -49.7448158},  //
      {-2.0519433, -49.6754761},   //
      {-2.05611825, -49.6381378},  //
      {-2.06292534, -49.5415154},  //
      {-2.06659079, -49.4894905},  //
      {-2.07245398, -49.3683434},  //
      {-2.07561111, -49.303112},   //
      {-2.0805335, -49.1601944},   //
      {-2.083184, -49.0832367},    //
      {-2.08716774, -48.9212952},  //
      {-2.08931279, -48.8340988},  //
      {-2.09236097, -48.6558952},  //
      {-2.09400225, -48.5599403},  //
      {-2.09611726, -48.3682251},  //
      {-2.09725595, -48.2649956},  //
      {-2.09844041, -48.0625229},  //
      {-2.09907818, -47.9534988},  //
      {-2.09933472, -47.7430229},  //
      {-2.099473, -47.6296921},    //
      {-2.09880471, -47.4139671},  //
      {-2.0984447, -47.2978058},   //
      {-2.09685397, -47.079586},   //
      {-2.09599733, -46.9620819},  //
      {-2.09348655, -46.7441177},  //
      {-2.09213471, -46.6267548},  //
      {-2.08870697, -46.4118042},  //
      {-2.08686137, -46.2960587},  //
      {-2.08251905, -46.0868721},  //
      {-2.08018088, -45.9742355},  //
      {-2.07492685, -45.7735672},  //
      {-2.07209778, -45.6655159},  //
      {-2.06593466, -45.4761238},  //
      {-2.06261611, -45.3741417},  //
      {-2.05554652, -45.1987762},  //
      {-2.05173969, -45.1043472},  //
      {-2.0437665, -44.9457626},   //
      {-2.03947306, -44.8603706},  //
      {-2.0305984, -44.7213211},   //
      {-2.02581978, -44.6464462},  //
      {-2.00857353, -44.4470177},  //
      {-1.99928713, -44.3396339},  //
      {-1.97939372, -44.1764374},  //
      {-1.96868181, -44.088562},   //
      {-1.94643128, -43.9606056},  //
      {-1.93445015, -43.8917084},  //
      {-1.91013229, -43.7980042},  //
      {-1.8970381, -43.7475471},   //
      {-1.87094307, -43.6871071},  //
      {-1.85689187, -43.6545601},  //
      {-1.82930958, -43.6263885},  //
      {-1.81445765, -43.6112213},  //
      {-1.78567815, -43.6143265},  //
      {-1.77018154, -43.6160011},  //
      {-1.74049473, -43.6493988},  //
      {-1.7245096, -43.6673851},   //
      {-1.69420552, -43.7300873},  //
      {-1.67788804, -43.7638474},  //
      {-1.64725685, -43.8548546},  //
      {-1.63076305, -43.9038582},  //
      {-1.60009444, -44.0221863},  //
      {-1.58358061, -44.0859032},  //
      {-1.55316484, -44.2305565},  //
      {-1.53678703, -44.3084488},  //
      {-1.5069139, -44.4784431},   //
      {-1.49082828, -44.5699806},  //
      {-1.46178782, -44.7643242},  //
      {-1.44615066, -44.8689728},  //
      {-1.4182328, -45.0866737},   //
      {-1.40320015, -45.2038994},  //
      {-1.37669504, -45.4439659},  //
      {-1.36242306, -45.5732346},  //
      {-1.3376205, -45.8346825},   //
      {-1.32426536, -45.9754601},  //
      {-1.30145538, -46.2572975},  //
      {-1.28917313, -46.4090538},  //
      {-1.26864588, -46.7102852},  //
      {-1.2575928, -46.8724861},   //
      {-1.23963809, -47.1921234},  //
      {-1.22997022, -47.3642349},  //
      {-1.22630513, -47.4352608},  //
      {-1.22433162, -47.4735069},  //
      {-1.22044277, -47.5457954},  //
      {-1.21834874, -47.5847206},  //
      {-1.21425939, -47.6579361},  //
      {-1.21205735, -47.697361},   //
      {-1.20779085, -47.7711678},  //
      {-1.20549357, -47.8109093},  //
      {-1.20107341, -47.8849716},  //
      {-1.19869339, -47.9248505},  //
      {-1.19414306, -47.9988327},  //
      {-1.19169295, -48.0386696},  //
      {-1.18703592, -48.112236},   //
      {-1.18452823, -48.1518517},  //
      {-1.17978776, -48.2246666},  //
      {-1.17723513, -48.2638741},  //
      {-1.17243469, -48.3356056},  //
      {-1.16984987, -48.3742294},  //
      {-1.16501284, -48.4445381},  //
      {-1.16240835, -48.4823952},  //
      {-1.15755832, -48.5509491},  //
      {-1.15494668, -48.5878601},  //
      {-1.15010679, -48.6543198},  //
      {-1.14750075, -48.6901054},  //
      {-1.14269459, -48.7541351},  //
      {-1.14010668, -48.7886124},  //
      {-1.13535774, -48.8498802},  //
      {-1.13280058, -48.8828697},  //
      {-1.1281321, -48.94104},     //
      {-1.12561834, -48.9723625},  //
      {-1.12105381, -49.0270958},  //
      {-1.11859596, -49.0565681},  //
      {-1.11415875, -49.1075325},  //
      {-1.11176956, -49.1349754},  //
      {-1.10748327, -49.1818352},  //
      {-1.10517526, -49.2070656},  //
      {-1.10106301, -49.249485},   //
      {-1.09884882, -49.2723236},  //
      {-1.09493434, -49.309967},   //
      {-1.09282649, -49.3302345},  //
      {-1.04665601, -49.7561989},  //
      {-1.02179492, -49.9855652},  //
  });

  simplify(polys);
  Dump(polys);
  std::cout << "-------------" << std::endl;
  DumpTriangulation(polys);
}

}  // namespace manifold
